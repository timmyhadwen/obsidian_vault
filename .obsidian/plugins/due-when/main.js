/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DueWhen
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  thisWeekTag: "#thisweek",
  nextWeekTag: "#upcoming",
  thisMonthTag: "#ongoing",
  neverTag: "#abandoned",
  lastWeekday: false
};
var DueWhen = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "end-of-this-week",
      name: "Due end of this week",
      editorCallback: (editor, view) => {
        let date = new Date();
        const dow = date.getDay();
        const dom = date.getDate();
        let add_days = (12 - dow) % 7;
        date.setDate(dom + add_days);
        editor.replaceSelection(` [due:: ${date.toISOString().split("T")[0]}] ${this.settings.thisWeekTag} `);
      }
    });
    this.addCommand({
      id: "end-of-next-week",
      name: "Due end of next week",
      editorCallback: (editor, view) => {
        let date = new Date();
        const dow = date.getDay();
        const dom = date.getDate();
        let add_days = (12 - dow) % 7;
        date.setDate(dom + add_days + 7);
        editor.replaceSelection(` [due:: ${date.toISOString().split("T")[0]}] ${this.settings.nextWeekTag} `);
      }
    });
    this.addCommand({
      id: "end-of-this-month",
      name: "Due end of this month",
      editorCallback: (editor, view) => {
        let date = new Date();
        const month = date.getMonth();
        date.setMonth(month + 1);
        date.setDate(0);
        const dow = date.getDay();
        if (this.settings.lastWeekday) {
          if (dow == 0) {
            date.setDate(date.getDate() - 2);
          } else if (dow == 6) {
            date.setDate(date.getDate() - 1);
          }
        }
        editor.replaceSelection(` [due:: ${date.toISOString().split("T")[0]}] ${this.settings.thisMonthTag} `);
      }
    });
    this.addCommand({
      id: "never-gonna-happen",
      name: "Due after I'm gone",
      editorCallback: (editor, view) => {
        let date = new Date();
        const year = date.getFullYear();
        date.setFullYear(year + 100);
        editor.replaceSelection(` [due:: ${date.toISOString().split("T")[0]}] ${this.settings.neverTag} `);
      }
    });
    this.addSettingTab(new DueWhenSettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DueWhenSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("This week tag").setDesc("Tag to add to due dates set at the end of this week").addText((text) => text.setPlaceholder("#thisweek").setValue(this.plugin.settings.thisWeekTag).onChange(async (value) => {
      console.log("New tag for this week: " + value);
      this.plugin.settings.thisWeekTag = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Next week tag").setDesc("Tag to add to due dates set at the end of next week").addText((text) => text.setPlaceholder("#upcoming").setValue(this.plugin.settings.nextWeekTag).onChange(async (value) => {
      console.log("New tag for next week: " + value);
      this.plugin.settings.nextWeekTag = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("This month tag").setDesc("Tag to add to due dates set at the end of this month").addText((text) => text.setPlaceholder("#ongoing").setValue(this.plugin.settings.thisMonthTag).onChange(async (value) => {
      console.log("New tag for this month: " + value);
      this.plugin.settings.thisMonthTag = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Never tag").setDesc("Tag to add to due dates set after you're gone and it's no longer your problem").addText((text) => text.setPlaceholder("#abandoned").setValue(this.plugin.settings.neverTag).onChange(async (value) => {
      console.log("New tag for this month: " + value);
      this.plugin.settings.neverTag = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Last Weekday").setDesc("Set end-of-month to last weekday of month (instead of last day?)").addToggle((toggle) => toggle.setValue(this.plugin.settings.lastWeekday).onChange(async (value) => {
      this.plugin.settings.lastWeekday = value;
      await this.plugin.saveSettings();
    }));
  }
};

/* nosourcemap */